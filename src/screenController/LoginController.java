package screenController;

import java.util.ArrayList;

import client.ClientController;
import client.ClientUI;
import enums.Commands;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import logic.LoginDetail;
import logic.Message;
import logic.WorkerDetail;
import workerScreenController.ParkManagerScreenController;
import workerScreenController.WorkerParkDashboardController;
import workerScreenController.DepartmentManagerDashboardController;

public class LoginController extends ScreenController {

	@FXML
	private Text usernameS;
	@FXML
	private Text passwordS;
	@FXML
	private Text idS;
	@FXML
	private Text errorT;
	@FXML
	private TextField usernameT;
	@FXML
	private TextField passwordT;
	@FXML
	private TextField idT;
	@FXML
	private ImageView icon1;
	@FXML
	private ImageView icon2;
	@FXML
	private ImageView icon3;
	@FXML
	private CheckBox workerCB;
	
	
	private String getID() {
		return idT.getText();
	}
	
	private String getUsername() {
		return usernameT.getText();
	}
	
	private String getPassword() {
		return passwordT.getText();
	}
	
	public void checkBox(ActionEvent event) throws Exception {
		errorT.setVisible(false);
		if(workerCB.isSelected())
			setVisableDisable(true , false);
		else
			setVisableDisable(false , true);
	}
	
	public void setVisableDisable(boolean Condition1, boolean Condition2) {
		idS.setVisible(Condition2);
		idT.setVisible(Condition2);
		idT.setDisable(Condition1);
		icon1.setVisible(Condition2);
		usernameS.setVisible(Condition1);
		usernameT.setVisible(Condition1);
		passwordS.setVisible(Condition1);
		passwordT.setVisible(Condition1);
		usernameT.setDisable(Condition2);
		passwordT.setDisable(Condition2);
		icon2.setVisible(Condition1);
		icon3.setVisible(Condition1);
	}

	public void xBtn(ActionEvent event) throws Exception {
		Message disconnectClient = new Message(null,Commands.ClientDisconnect);
		ClientController.client.sendToServer(disconnectClient);
		System.exit(0);
	}
	
	/**
	 * Handles the action event for the login button.
	 * @param event The action event generated by clicking the login button.
	 * @throws Exception Throws Exception if an error occurs during execution.
	 */
	public void loginBtn(ActionEvent event) throws Exception {
	    // Hide any previous error message
	    errorT.setVisible(false);

	    // Check if worker checkbox is selected
	    if(workerCB.isSelected()) {
	        // Create login details object for worker
	        LoginDetail loginDetail = new LoginDetail(getUsername(), getPassword());
	        // Create a message containing login details and command to check worker login
	        Message loginDetailMsg = new Message(loginDetail, Commands.CheckWorkerLogin);

	        // Send message to server and wait for response
	        boolean awaitResponse = true;
	        ClientController.client.sendToServer(loginDetailMsg);
	        while (awaitResponse) {
	            try {
	                Thread.sleep(100);
	                awaitResponse = ClientController.client.mainScreenController.isGotResponse();
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        }
	        
	        // Reset gotResponse flag
	        ClientController.client.mainScreenController.setGotResponse(true);

	        // Retrieve worker details from response
	        WorkerDetail workerDetail = ClientController.client.mainScreenController.getWorkerLoginValid();

	        // Move to respective worker screen based on role
	        System.out.println(workerDetail.getRole());
	        ClientController.client.workerController.setWorkerDetail(workerDetail);
	        if(workerDetail.getRole().equals("Park Manager")) {
	            System.out.println("Entering Park Manager..");
	            System.out.println(workerDetail.getParkName());
	            ((Node)event.getSource()).getScene().getWindow().hide();
	            ParkManagerScreenController newScreen = new ParkManagerScreenController();
	            newScreen.start(new Stage());
	        }

	        if(workerDetail.getRole().equals("Department Manager")) {
	            System.out.println("Entering Department Manager..");
	            ((Node)event.getSource()).getScene().getWindow().hide();
	            DepartmentManagerDashboardController newScreen = new DepartmentManagerDashboardController();
	            newScreen.start(new Stage());
	        }

	        if(workerDetail.getRole().equals("Park Worker")) {
	            ((Node)event.getSource()).getScene().getWindow().hide();
	            WorkerParkDashboardController newScreen = new WorkerParkDashboardController();
	            newScreen.start(new Stage());
	        }

	    } else {
	        // If worker checkbox is not selected

	        // Validate ID length
	        if(getID().length() != 9 ) {
	            errorT.setText("**ID must be 9 digits");
	            errorT.setVisible(true);
	            return;
	        }

	        // Create login details object for visitor
	        LoginDetail loginDetail = new LoginDetail(getID());
	        // Create a message containing login details and command to check visitor login
	        Message loginDetailMsg = new Message(loginDetail, Commands.CheckVisitorLogin);
	        ClientController.client.sendToServer(loginDetailMsg);

	        // Wait for response from server
	        boolean awaitResponse = true;
	        while (awaitResponse) {
	            try {
	                Thread.sleep(100);
	                awaitResponse = ClientController.client.mainScreenController.isGotResponse();
	            } catch (InterruptedException e) {
	                e.printStackTrace();
	            }
	        }           
	        
	        // Check if visitor login is valid
	        if(!ClientController.client.mainScreenController.isVisitorLoginValid()) {
	            // Visitor is already logged in
	            errorT.setVisible(true);
	            errorT.setText("**User is already logged in");
	        } else {
	            // Move to visitor screen
	            ((Node)event.getSource()).getScene().getWindow().hide();
	            NewBookingController newScreen = new NewBookingController();
	            ClientController.client.bookingController.setID(getID()); // saves user ID
	            newScreen.start(new Stage());                
	        }
	    }
	}

	
	public void start(Stage primaryStage) throws Exception {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/gui/LoginScreen.fxml"));
    	loader.setController(this); // Set the controller
    	Parent root = loader.load();
    	Scene scene = new Scene(root);
    	primaryStage.setTitle("LoginScreen");
    	primaryStage.setScene(scene);
    	RemoveTopBar(primaryStage,root);
    	primaryStage.show();
	}
}
