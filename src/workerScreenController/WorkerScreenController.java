package workerScreenController;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import client.ClientController;
import enums.Commands;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import reportsScreenController.CancellationReportScreenController;
import reportsScreenController.ParkAvailabilityReportScreenController;
import reportsScreenController.VisitorStatisticReportScreenController;
import reportsScreenController.VisitsReportScreenController;
import screenController.ScreenController;
import logic.LoginDetail;
import logic.Message;
import screenController.LoginController;

public class WorkerScreenController extends ScreenController {
	

    public String getCurrentOccupancy() {
    	String parkName = ClientController.client.workerController.getWorkerDetail().getParkName();
    	Message currOccupancy = new Message(parkName,Commands.CurrentOccupancy);
    	try {
			ClientController.client.sendToServer(currOccupancy);
		} catch (IOException e) {
			e.printStackTrace();
		}
    	boolean awaitResponse = false;
		while (!awaitResponse) 
		{
			try {
				Thread.sleep(100);
				awaitResponse = ClientController.client.workerController.isGotResponse();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		ClientController.client.workerController.setGotResponse(false);
    	return ClientController.client.workerController.getCurrentOccupancy();
    }
	
	
	
	//Those Buttons Will Transition From Screen to Screen in the workers Screens
//	
	/**
	 * Event handler for the dashboard button.
	 * Hides the current window and opens a new window for the park manager dashboard.
	 * @param event The action event generated by clicking the dashboard button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
	public  void DashboardBtn(ActionEvent event) throws Exception{
		((Node)event.getSource()).getScene().getWindow().hide();
		ParkManagerScreenController newScreen = new ParkManagerScreenController();
		newScreen.start(new Stage());
	}
//	
//	public void parkAvailabilityReportBtn(ActionEvent event) throws Exception{
//		
//	}
	
	/**
	 * Event handler for the department manager dashboard button.
	 * Hides the current window and opens a new window for the department manager dashboard.
	 * @param event The action event generated by clicking the department manager dashboard button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
    public void DMDashboardBtn(ActionEvent event) throws Exception {
    	((Node)event.getSource()).getScene().getWindow().hide();
    	DepartmentManagerDashboardController newScreen = new DepartmentManagerDashboardController();
		newScreen.start(new Stage());

    }
	
	
    /**
     * Event handler for the visitor statistic report button.
     * Hides the current window and opens a new window for generating a visitor statistic report.
     * @param event The action event generated by clicking the visitor statistic report button.
     * @throws Exception Throws Exception if an error occurs during window initialization.
     */
	public void VisitorStatisticReportBtn(ActionEvent event) throws Exception{
		((Node)event.getSource()).getScene().getWindow().hide();
		VisitorStatisticReportScreenController newScreen = new VisitorStatisticReportScreenController();
		newScreen.start(new Stage());
		
	}
//	
	
	/**
	 * Event handler for the visits report button.
	 * Hides the current window and opens a new window for generating a visits report.
	 * @param event The action event generated by clicking the visits report button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
	public void VisitsReportBtn(ActionEvent event) throws Exception{
		((Node)event.getSource()).getScene().getWindow().hide();
		VisitsReportScreenController newScreen = new VisitsReportScreenController();
		newScreen.start(new Stage());
	}
	
	/**
	 * Event handler for the cancellation report button.
	 * Hides the current window and opens a new window for generating a cancellation report.
	 * @param event The action event generated by clicking the cancellation report button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
	public void cancellationReportBtn(ActionEvent event) throws Exception{
		((Node)event.getSource()).getScene().getWindow().hide();
		CancellationReportScreenController newScreen = new CancellationReportScreenController();
		newScreen.start(new Stage());
		
	}
	
	/**
	 * Event handler for the logout button.
	 * Sends a logout message to the server, hides the current window, and opens a new login window.
	 * @param event The action event generated by clicking the logout button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
	public void logoutBtn(ActionEvent event) throws Exception {
		//LoginDetail logoutDetail = new LoginDetail(ClientController.client.bookingController.getID());
		Message logoutDetailMsg = new Message(ClientController.client.workerController.getWorkerDetail().getWorkerId(),Commands.WorkerLogOut);
		ClientController.client.sendToServer(logoutDetailMsg);
		((Node)event.getSource()).getScene().getWindow().hide();
		LoginController newScreen = new LoginController();
		newScreen.start(new Stage());
	}


    
	//TODO 
	/**
	 * Event handler for the availability report button.
	 * Hides the current window and opens a new window to display the park availability report.
	 * @param event The action event generated by clicking the availability report button.
	 * @throws Exception Throws Exception if an error occurs during window initialization.
	 */
	public void availabilityReportBtn(ActionEvent event) throws Exception {
    	((Node)event.getSource()).getScene().getWindow().hide();
    	ParkAvailabilityReportScreenController newScreen = new ParkAvailabilityReportScreenController();
		newScreen.start(new Stage());
    }
	

}
